// Code generated by MockGen. DO NOT EDIT.
// Source: batch.write.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockBatchWrite is a mock of BatchWrite interface
type MockBatchWrite struct {
	ctrl     *gomock.Controller
	recorder *MockBatchWriteMockRecorder
}

// MockBatchWriteMockRecorder is the mock recorder for MockBatchWrite
type MockBatchWriteMockRecorder struct {
	mock *MockBatchWrite
}

// NewMockBatchWrite creates a new mock instance
func NewMockBatchWrite(ctrl *gomock.Controller) *MockBatchWrite {
	mock := &MockBatchWrite{ctrl: ctrl}
	mock.recorder = &MockBatchWriteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchWrite) EXPECT() *MockBatchWriteMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockBatchWrite) Put(items ...interface{}) dynamodb.BatchWrite {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(dynamodb.BatchWrite)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockBatchWriteMockRecorder) Put(items ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBatchWrite)(nil).Put), items...)
}

// Delete mocks base method
func (m *MockBatchWrite) Delete(keys ...dynamo.Keyed) dynamodb.BatchWrite {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(dynamodb.BatchWrite)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBatchWriteMockRecorder) Delete(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatchWrite)(nil).Delete), keys...)
}

// ConsumedCapacity mocks base method
func (m *MockBatchWrite) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.BatchWrite {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.BatchWrite)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockBatchWriteMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockBatchWrite)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockBatchWrite) Run() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockBatchWriteMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBatchWrite)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockBatchWrite) RunWithContext(ctx aws.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockBatchWriteMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockBatchWrite)(nil).RunWithContext), ctx)
}
