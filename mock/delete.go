// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockDelete is a mock of Delete interface
type MockDelete struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteMockRecorder
}

// MockDeleteMockRecorder is the mock recorder for MockDelete
type MockDeleteMockRecorder struct {
	mock *MockDelete
}

// NewMockDelete creates a new mock instance
func NewMockDelete(ctrl *gomock.Controller) *MockDelete {
	mock := &MockDelete{ctrl: ctrl}
	mock.recorder = &MockDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelete) EXPECT() *MockDeleteMockRecorder {
	return m.recorder
}

// Range mocks base method
func (m *MockDelete) Range(name string, value interface{}) dynamodb.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", name, value)
	ret0, _ := ret[0].(dynamodb.Delete)
	return ret0
}

// Range indicates an expected call of Range
func (mr *MockDeleteMockRecorder) Range(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockDelete)(nil).Range), name, value)
}

// If mocks base method
func (m *MockDelete) If(expr string, args ...interface{}) dynamodb.Delete {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "If", varargs...)
	ret0, _ := ret[0].(dynamodb.Delete)
	return ret0
}

// If indicates an expected call of If
func (mr *MockDeleteMockRecorder) If(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "If", reflect.TypeOf((*MockDelete)(nil).If), varargs...)
}

// ConsumedCapacity mocks base method
func (m *MockDelete) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.Delete)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockDeleteMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockDelete)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockDelete) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockDeleteMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDelete)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockDelete) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockDeleteMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockDelete)(nil).RunWithContext), ctx)
}

// OldValue mocks base method
func (m *MockDelete) OldValue(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValue", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValue indicates an expected call of OldValue
func (mr *MockDeleteMockRecorder) OldValue(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValue", reflect.TypeOf((*MockDelete)(nil).OldValue), out)
}

// OldValueWithContext mocks base method
func (m *MockDelete) OldValueWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValueWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValueWithContext indicates an expected call of OldValueWithContext
func (mr *MockDeleteMockRecorder) OldValueWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValueWithContext", reflect.TypeOf((*MockDelete)(nil).OldValueWithContext), ctx, out)
}
