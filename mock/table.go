// Code generated by MockGen. DO NOT EDIT.
// Source: table.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockTable is a mock of Table interface
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockTable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockTableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTable)(nil).Name))
}

// Batch mocks base method
func (m *MockTable) Batch(hashAndRangeKeyName ...string) dynamodb.Batch {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hashAndRangeKeyName {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Batch", varargs...)
	ret0, _ := ret[0].(dynamodb.Batch)
	return ret0
}

// Batch indicates an expected call of Batch
func (mr *MockTableMockRecorder) Batch(hashAndRangeKeyName ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockTable)(nil).Batch), hashAndRangeKeyName...)
}

// Check mocks base method
func (m *MockTable) Check(hashKey string, value interface{}) dynamodb.ConditionCheck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", hashKey, value)
	ret0, _ := ret[0].(dynamodb.ConditionCheck)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockTableMockRecorder) Check(hashKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockTable)(nil).Check), hashKey, value)
}

// Delete mocks base method
func (m *MockTable) Delete(name string, value interface{}) dynamodb.Delete {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, value)
	ret0, _ := ret[0].(dynamodb.Delete)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTableMockRecorder) Delete(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTable)(nil).Delete), name, value)
}

// Describe mocks base method
func (m *MockTable) Describe() dynamodb.DescribeTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(dynamodb.DescribeTable)
	return ret0
}

// Describe indicates an expected call of Describe
func (mr *MockTableMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockTable)(nil).Describe))
}

// Put mocks base method
func (m *MockTable) Put(item interface{}) dynamodb.Put {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", item)
	ret0, _ := ret[0].(dynamodb.Put)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockTableMockRecorder) Put(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTable)(nil).Put), item)
}

// Get mocks base method
func (m *MockTable) Get(name string, value interface{}) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, value)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockTableMockRecorder) Get(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTable)(nil).Get), name, value)
}

// Scan mocks base method
func (m *MockTable) Scan() dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockTableMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockTable)(nil).Scan))
}

// DeleteTable mocks base method
func (m *MockTable) DeleteTable() dynamodb.DeleteTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable")
	ret0, _ := ret[0].(dynamodb.DeleteTable)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable
func (mr *MockTableMockRecorder) DeleteTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockTable)(nil).DeleteTable))
}

// UpdateTTL mocks base method
func (m *MockTable) UpdateTTL(attribute string, enabled bool) dynamodb.UpdateTTL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTTL", attribute, enabled)
	ret0, _ := ret[0].(dynamodb.UpdateTTL)
	return ret0
}

// UpdateTTL indicates an expected call of UpdateTTL
func (mr *MockTableMockRecorder) UpdateTTL(attribute, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTTL", reflect.TypeOf((*MockTable)(nil).UpdateTTL), attribute, enabled)
}

// DescribeTTL mocks base method
func (m *MockTable) DescribeTTL() dynamodb.DescribeTTL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTTL")
	ret0, _ := ret[0].(dynamodb.DescribeTTL)
	return ret0
}

// DescribeTTL indicates an expected call of DescribeTTL
func (mr *MockTableMockRecorder) DescribeTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTTL", reflect.TypeOf((*MockTable)(nil).DescribeTTL))
}

// Update mocks base method
func (m *MockTable) Update(hashKey string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", hashKey, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTableMockRecorder) Update(hashKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTable)(nil).Update), hashKey, value)
}

// UpdateTable mocks base method
func (m *MockTable) UpdateTable() dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable")
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// UpdateTable indicates an expected call of UpdateTable
func (mr *MockTableMockRecorder) UpdateTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockTable)(nil).UpdateTable))
}
