// Code generated by MockGen. DO NOT EDIT.
// Source: scan.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockScan is a mock of Scan interface
type MockScan struct {
	ctrl     *gomock.Controller
	recorder *MockScanMockRecorder
}

// MockScanMockRecorder is the mock recorder for MockScan
type MockScanMockRecorder struct {
	mock *MockScan
}

// NewMockScan creates a new mock instance
func NewMockScan(ctrl *gomock.Controller) *MockScan {
	mock := &MockScan{ctrl: ctrl}
	mock.recorder = &MockScanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScan) EXPECT() *MockScanMockRecorder {
	return m.recorder
}

// StartFrom mocks base method
func (m *MockScan) StartFrom(key dynamo.PagingKey) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFrom", key)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// StartFrom indicates an expected call of StartFrom
func (mr *MockScanMockRecorder) StartFrom(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFrom", reflect.TypeOf((*MockScan)(nil).StartFrom), key)
}

// Index mocks base method
func (m *MockScan) Index(name string) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", name)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockScanMockRecorder) Index(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockScan)(nil).Index), name)
}

// Project mocks base method
func (m *MockScan) Project(paths ...string) dynamodb.Scan {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Project", varargs...)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Project indicates an expected call of Project
func (mr *MockScanMockRecorder) Project(paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockScan)(nil).Project), paths...)
}

// Filter mocks base method
func (m *MockScan) Filter(expr string, args ...interface{}) dynamodb.Scan {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockScanMockRecorder) Filter(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockScan)(nil).Filter), varargs...)
}

// Consistent mocks base method
func (m *MockScan) Consistent(on bool) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consistent", on)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Consistent indicates an expected call of Consistent
func (mr *MockScanMockRecorder) Consistent(on interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consistent", reflect.TypeOf((*MockScan)(nil).Consistent), on)
}

// Limit mocks base method
func (m *MockScan) Limit(limit int64) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockScanMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockScan)(nil).Limit), limit)
}

// SearchLimit mocks base method
func (m *MockScan) SearchLimit(limit int64) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLimit", limit)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// SearchLimit indicates an expected call of SearchLimit
func (mr *MockScanMockRecorder) SearchLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLimit", reflect.TypeOf((*MockScan)(nil).SearchLimit), limit)
}

// ConsumedCapacity mocks base method
func (m *MockScan) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.Scan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.Scan)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockScanMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockScan)(nil).ConsumedCapacity), cc)
}

// Iter mocks base method
func (m *MockScan) Iter() dynamo.PagingIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(dynamo.PagingIter)
	return ret0
}

// Iter indicates an expected call of Iter
func (mr *MockScanMockRecorder) Iter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockScan)(nil).Iter))
}

// All mocks base method
func (m *MockScan) All(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockScanMockRecorder) All(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockScan)(nil).All), out)
}

// AllWithContext mocks base method
func (m *MockScan) AllWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllWithContext indicates an expected call of AllWithContext
func (mr *MockScanMockRecorder) AllWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithContext", reflect.TypeOf((*MockScan)(nil).AllWithContext), ctx, out)
}

// AllWithLastEvaluatedKey mocks base method
func (m *MockScan) AllWithLastEvaluatedKey(out interface{}) (dynamo.PagingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithLastEvaluatedKey", out)
	ret0, _ := ret[0].(dynamo.PagingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithLastEvaluatedKey indicates an expected call of AllWithLastEvaluatedKey
func (mr *MockScanMockRecorder) AllWithLastEvaluatedKey(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithLastEvaluatedKey", reflect.TypeOf((*MockScan)(nil).AllWithLastEvaluatedKey), out)
}

// AllWithLastEvaluatedKeyContext mocks base method
func (m *MockScan) AllWithLastEvaluatedKeyContext(ctx aws.Context, out interface{}) (dynamo.PagingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithLastEvaluatedKeyContext", ctx, out)
	ret0, _ := ret[0].(dynamo.PagingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithLastEvaluatedKeyContext indicates an expected call of AllWithLastEvaluatedKeyContext
func (mr *MockScanMockRecorder) AllWithLastEvaluatedKeyContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithLastEvaluatedKeyContext", reflect.TypeOf((*MockScan)(nil).AllWithLastEvaluatedKeyContext), ctx, out)
}

// Count mocks base method
func (m *MockScan) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockScanMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockScan)(nil).Count))
}

// CountWithContext mocks base method
func (m *MockScan) CountWithContext(ctx aws.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWithContext", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWithContext indicates an expected call of CountWithContext
func (mr *MockScanMockRecorder) CountWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWithContext", reflect.TypeOf((*MockScan)(nil).CountWithContext), ctx)
}
