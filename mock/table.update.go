// Code generated by MockGen. DO NOT EDIT.
// Source: table.update.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockUpdateTable is a mock of UpdateTable interface
type MockUpdateTable struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTableMockRecorder
}

// MockUpdateTableMockRecorder is the mock recorder for MockUpdateTable
type MockUpdateTableMockRecorder struct {
	mock *MockUpdateTable
}

// NewMockUpdateTable creates a new mock instance
func NewMockUpdateTable(ctrl *gomock.Controller) *MockUpdateTable {
	mock := &MockUpdateTable{ctrl: ctrl}
	mock.recorder = &MockUpdateTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateTable) EXPECT() *MockUpdateTableMockRecorder {
	return m.recorder
}

// OnDemand mocks base method
func (m *MockUpdateTable) OnDemand(enabled bool) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDemand", enabled)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// OnDemand indicates an expected call of OnDemand
func (mr *MockUpdateTableMockRecorder) OnDemand(enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDemand", reflect.TypeOf((*MockUpdateTable)(nil).OnDemand), enabled)
}

// Provision mocks base method
func (m *MockUpdateTable) Provision(read, write int64) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", read, write)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// Provision indicates an expected call of Provision
func (mr *MockUpdateTableMockRecorder) Provision(read, write interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockUpdateTable)(nil).Provision), read, write)
}

// ProvisionIndex mocks base method
func (m *MockUpdateTable) ProvisionIndex(name string, read, write int64) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionIndex", name, read, write)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// ProvisionIndex indicates an expected call of ProvisionIndex
func (mr *MockUpdateTableMockRecorder) ProvisionIndex(name, read, write interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionIndex", reflect.TypeOf((*MockUpdateTable)(nil).ProvisionIndex), name, read, write)
}

// CreateIndex mocks base method
func (m *MockUpdateTable) CreateIndex(index dynamo.Index) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", index)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockUpdateTableMockRecorder) CreateIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockUpdateTable)(nil).CreateIndex), index)
}

// DeleteIndex mocks base method
func (m *MockUpdateTable) DeleteIndex(name string) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", name)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex
func (mr *MockUpdateTableMockRecorder) DeleteIndex(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockUpdateTable)(nil).DeleteIndex), name)
}

// Stream mocks base method
func (m *MockUpdateTable) Stream(view dynamo.StreamView) dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", view)
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockUpdateTableMockRecorder) Stream(view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockUpdateTable)(nil).Stream), view)
}

// DisableStream mocks base method
func (m *MockUpdateTable) DisableStream() dynamodb.UpdateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableStream")
	ret0, _ := ret[0].(dynamodb.UpdateTable)
	return ret0
}

// DisableStream indicates an expected call of DisableStream
func (mr *MockUpdateTableMockRecorder) DisableStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableStream", reflect.TypeOf((*MockUpdateTable)(nil).DisableStream))
}

// Run mocks base method
func (m *MockUpdateTable) Run() (dynamo.Description, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(dynamo.Description)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockUpdateTableMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUpdateTable)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockUpdateTable) RunWithContext(ctx aws.Context) (dynamo.Description, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(dynamo.Description)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockUpdateTableMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockUpdateTable)(nil).RunWithContext), ctx)
}
