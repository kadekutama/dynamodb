// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockQuery is a mock of Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Range mocks base method
func (m *MockQuery) Range(name string, op dynamo.Operator, values ...interface{}) dynamodb.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, op}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Range", varargs...)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Range indicates an expected call of Range
func (mr *MockQueryMockRecorder) Range(name, op interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, op}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockQuery)(nil).Range), varargs...)
}

// StartFrom mocks base method
func (m *MockQuery) StartFrom(key dynamo.PagingKey) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFrom", key)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// StartFrom indicates an expected call of StartFrom
func (mr *MockQueryMockRecorder) StartFrom(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFrom", reflect.TypeOf((*MockQuery)(nil).StartFrom), key)
}

// Index mocks base method
func (m *MockQuery) Index(name string) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", name)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockQueryMockRecorder) Index(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockQuery)(nil).Index), name)
}

// Project mocks base method
func (m *MockQuery) Project(paths ...string) dynamodb.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Project", varargs...)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Project indicates an expected call of Project
func (mr *MockQueryMockRecorder) Project(paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockQuery)(nil).Project), paths...)
}

// ProjectExpr mocks base method
func (m *MockQuery) ProjectExpr(expr string, args ...interface{}) dynamodb.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectExpr", varargs...)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// ProjectExpr indicates an expected call of ProjectExpr
func (mr *MockQueryMockRecorder) ProjectExpr(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectExpr", reflect.TypeOf((*MockQuery)(nil).ProjectExpr), varargs...)
}

// Filter mocks base method
func (m *MockQuery) Filter(expr string, args ...interface{}) dynamodb.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockQueryMockRecorder) Filter(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockQuery)(nil).Filter), varargs...)
}

// Consistent mocks base method
func (m *MockQuery) Consistent(on bool) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consistent", on)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Consistent indicates an expected call of Consistent
func (mr *MockQueryMockRecorder) Consistent(on interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consistent", reflect.TypeOf((*MockQuery)(nil).Consistent), on)
}

// Limit mocks base method
func (m *MockQuery) Limit(limit int64) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Limit indicates an expected call of Limit
func (mr *MockQueryMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), limit)
}

// SearchLimit mocks base method
func (m *MockQuery) SearchLimit(limit int64) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLimit", limit)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// SearchLimit indicates an expected call of SearchLimit
func (mr *MockQueryMockRecorder) SearchLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLimit", reflect.TypeOf((*MockQuery)(nil).SearchLimit), limit)
}

// Order mocks base method
func (m *MockQuery) Order(order dynamo.Order) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", order)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockQueryMockRecorder) Order(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockQuery)(nil).Order), order)
}

// ConsumedCapacity mocks base method
func (m *MockQuery) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.Query)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockQueryMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockQuery)(nil).ConsumedCapacity), cc)
}

// One mocks base method
func (m *MockQuery) One(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// One indicates an expected call of One
func (mr *MockQueryMockRecorder) One(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockQuery)(nil).One), out)
}

// OneWithContext mocks base method
func (m *MockQuery) OneWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OneWithContext indicates an expected call of OneWithContext
func (mr *MockQueryMockRecorder) OneWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneWithContext", reflect.TypeOf((*MockQuery)(nil).OneWithContext), ctx, out)
}

// Count mocks base method
func (m *MockQuery) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockQueryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockQuery)(nil).Count))
}

// CountWithContext mocks base method
func (m *MockQuery) CountWithContext(ctx aws.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWithContext", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWithContext indicates an expected call of CountWithContext
func (mr *MockQueryMockRecorder) CountWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWithContext", reflect.TypeOf((*MockQuery)(nil).CountWithContext), ctx)
}

// All mocks base method
func (m *MockQuery) All(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockQueryMockRecorder) All(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockQuery)(nil).All), out)
}

// AllWithContext mocks base method
func (m *MockQuery) AllWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllWithContext indicates an expected call of AllWithContext
func (mr *MockQueryMockRecorder) AllWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithContext", reflect.TypeOf((*MockQuery)(nil).AllWithContext), ctx, out)
}

// AllWithLastEvaluatedKey mocks base method
func (m *MockQuery) AllWithLastEvaluatedKey(out interface{}) (dynamo.PagingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithLastEvaluatedKey", out)
	ret0, _ := ret[0].(dynamo.PagingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithLastEvaluatedKey indicates an expected call of AllWithLastEvaluatedKey
func (mr *MockQueryMockRecorder) AllWithLastEvaluatedKey(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithLastEvaluatedKey", reflect.TypeOf((*MockQuery)(nil).AllWithLastEvaluatedKey), out)
}

// AllWithLastEvaluatedKeyContext mocks base method
func (m *MockQuery) AllWithLastEvaluatedKeyContext(ctx aws.Context, out interface{}) (dynamo.PagingKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithLastEvaluatedKeyContext", ctx, out)
	ret0, _ := ret[0].(dynamo.PagingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithLastEvaluatedKeyContext indicates an expected call of AllWithLastEvaluatedKeyContext
func (mr *MockQueryMockRecorder) AllWithLastEvaluatedKeyContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithLastEvaluatedKeyContext", reflect.TypeOf((*MockQuery)(nil).AllWithLastEvaluatedKeyContext), ctx, out)
}

// Iter mocks base method
func (m *MockQuery) Iter() dynamo.PagingIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(dynamo.PagingIter)
	return ret0
}

// Iter indicates an expected call of Iter
func (mr *MockQueryMockRecorder) Iter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQuery)(nil).Iter))
}
