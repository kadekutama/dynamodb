// Code generated by MockGen. DO NOT EDIT.
// Source: tx.write.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockWriteTx is a mock of WriteTx interface
type MockWriteTx struct {
	ctrl     *gomock.Controller
	recorder *MockWriteTxMockRecorder
}

// MockWriteTxMockRecorder is the mock recorder for MockWriteTx
type MockWriteTxMockRecorder struct {
	mock *MockWriteTx
}

// NewMockWriteTx creates a new mock instance
func NewMockWriteTx(ctrl *gomock.Controller) *MockWriteTx {
	mock := &MockWriteTx{ctrl: ctrl}
	mock.recorder = &MockWriteTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteTx) EXPECT() *MockWriteTxMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockWriteTx) Delete(d dynamodb.Delete) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", d)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockWriteTxMockRecorder) Delete(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriteTx)(nil).Delete), d)
}

// Put mocks base method
func (m *MockWriteTx) Put(p dynamodb.Put) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", p)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockWriteTxMockRecorder) Put(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockWriteTx)(nil).Put), p)
}

// Update mocks base method
func (m *MockWriteTx) Update(u dynamodb.Update) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", u)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockWriteTxMockRecorder) Update(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriteTx)(nil).Update), u)
}

// Check mocks base method
func (m *MockWriteTx) Check(check *dynamo.ConditionCheck) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", check)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockWriteTxMockRecorder) Check(check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockWriteTx)(nil).Check), check)
}

// Idempotent mocks base method
func (m *MockWriteTx) Idempotent(enabled bool) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Idempotent", enabled)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// Idempotent indicates an expected call of Idempotent
func (mr *MockWriteTxMockRecorder) Idempotent(enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Idempotent", reflect.TypeOf((*MockWriteTx)(nil).Idempotent), enabled)
}

// IdempotentWithToken mocks base method
func (m *MockWriteTx) IdempotentWithToken(token string) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdempotentWithToken", token)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// IdempotentWithToken indicates an expected call of IdempotentWithToken
func (mr *MockWriteTxMockRecorder) IdempotentWithToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdempotentWithToken", reflect.TypeOf((*MockWriteTx)(nil).IdempotentWithToken), token)
}

// ConsumedCapacity mocks base method
func (m *MockWriteTx) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockWriteTxMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockWriteTx)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockWriteTx) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockWriteTxMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWriteTx)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockWriteTx) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockWriteTxMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockWriteTx)(nil).RunWithContext), ctx)
}
