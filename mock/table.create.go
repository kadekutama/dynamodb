// Code generated by MockGen. DO NOT EDIT.
// Source: table.create.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockCreateTable is a mock of CreateTable interface
type MockCreateTable struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTableMockRecorder
}

// MockCreateTableMockRecorder is the mock recorder for MockCreateTable
type MockCreateTableMockRecorder struct {
	mock *MockCreateTable
}

// NewMockCreateTable creates a new mock instance
func NewMockCreateTable(ctrl *gomock.Controller) *MockCreateTable {
	mock := &MockCreateTable{ctrl: ctrl}
	mock.recorder = &MockCreateTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateTable) EXPECT() *MockCreateTableMockRecorder {
	return m.recorder
}

// OnDemand mocks base method
func (m *MockCreateTable) OnDemand(enabled bool) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDemand", enabled)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// OnDemand indicates an expected call of OnDemand
func (mr *MockCreateTableMockRecorder) OnDemand(enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDemand", reflect.TypeOf((*MockCreateTable)(nil).OnDemand), enabled)
}

// Provision mocks base method
func (m *MockCreateTable) Provision(readUnits, writeUnits int64) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", readUnits, writeUnits)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// Provision indicates an expected call of Provision
func (mr *MockCreateTableMockRecorder) Provision(readUnits, writeUnits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockCreateTable)(nil).Provision), readUnits, writeUnits)
}

// ProvisionIndex mocks base method
func (m *MockCreateTable) ProvisionIndex(index string, readUnits, writeUnits int64) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionIndex", index, readUnits, writeUnits)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// ProvisionIndex indicates an expected call of ProvisionIndex
func (mr *MockCreateTableMockRecorder) ProvisionIndex(index, readUnits, writeUnits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionIndex", reflect.TypeOf((*MockCreateTable)(nil).ProvisionIndex), index, readUnits, writeUnits)
}

// Stream mocks base method
func (m *MockCreateTable) Stream(view dynamo.StreamView) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", view)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockCreateTableMockRecorder) Stream(view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockCreateTable)(nil).Stream), view)
}

// Project mocks base method
func (m *MockCreateTable) Project(index string, projection dynamo.IndexProjection, includeAttribs ...string) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	varargs := []interface{}{index, projection}
	for _, a := range includeAttribs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Project", varargs...)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// Project indicates an expected call of Project
func (mr *MockCreateTableMockRecorder) Project(index, projection interface{}, includeAttribs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{index, projection}, includeAttribs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Project", reflect.TypeOf((*MockCreateTable)(nil).Project), varargs...)
}

// Index mocks base method
func (m *MockCreateTable) Index(index dynamo.Index) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", index)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockCreateTableMockRecorder) Index(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockCreateTable)(nil).Index), index)
}

// Tag mocks base method
func (m *MockCreateTable) Tag(key, value string) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", key, value)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockCreateTableMockRecorder) Tag(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockCreateTable)(nil).Tag), key, value)
}

// Run mocks base method
func (m *MockCreateTable) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockCreateTableMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCreateTable)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockCreateTable) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockCreateTableMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockCreateTable)(nil).RunWithContext), ctx)
}
