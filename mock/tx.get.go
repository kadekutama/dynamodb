// Code generated by MockGen. DO NOT EDIT.
// Source: tx.get.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockGetTx is a mock of GetTx interface
type MockGetTx struct {
	ctrl     *gomock.Controller
	recorder *MockGetTxMockRecorder
}

// MockGetTxMockRecorder is the mock recorder for MockGetTx
type MockGetTxMockRecorder struct {
	mock *MockGetTx
}

// NewMockGetTx creates a new mock instance
func NewMockGetTx(ctrl *gomock.Controller) *MockGetTx {
	mock := &MockGetTx{ctrl: ctrl}
	mock.recorder = &MockGetTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetTx) EXPECT() *MockGetTxMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGetTx) Get(q dynamodb.Query) dynamodb.GetTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", q)
	ret0, _ := ret[0].(dynamodb.GetTx)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockGetTxMockRecorder) Get(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetTx)(nil).Get), q)
}

// GetOne mocks base method
func (m *MockGetTx) GetOne(q dynamodb.Query, out interface{}) dynamodb.GetTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", q, out)
	ret0, _ := ret[0].(dynamodb.GetTx)
	return ret0
}

// GetOne indicates an expected call of GetOne
func (mr *MockGetTxMockRecorder) GetOne(q, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockGetTx)(nil).GetOne), q, out)
}

// ConsumedCapacity mocks base method
func (m *MockGetTx) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.GetTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.GetTx)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockGetTxMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockGetTx)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockGetTx) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockGetTxMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGetTx)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockGetTx) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockGetTxMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockGetTx)(nil).RunWithContext), ctx)
}

// All mocks base method
func (m *MockGetTx) All(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockGetTxMockRecorder) All(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockGetTx)(nil).All), out)
}

// AllWithContext mocks base method
func (m *MockGetTx) AllWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllWithContext indicates an expected call of AllWithContext
func (mr *MockGetTxMockRecorder) AllWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithContext", reflect.TypeOf((*MockGetTx)(nil).AllWithContext), ctx, out)
}
