// Code generated by MockGen. DO NOT EDIT.
// Source: update.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockUpdate is a mock of Update interface
type MockUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateMockRecorder
}

// MockUpdateMockRecorder is the mock recorder for MockUpdate
type MockUpdateMockRecorder struct {
	mock *MockUpdate
}

// NewMockUpdate creates a new mock instance
func NewMockUpdate(ctrl *gomock.Controller) *MockUpdate {
	mock := &MockUpdate{ctrl: ctrl}
	mock.recorder = &MockUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdate) EXPECT() *MockUpdateMockRecorder {
	return m.recorder
}

// Range mocks base method
func (m *MockUpdate) Range(name string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", name, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Range indicates an expected call of Range
func (mr *MockUpdateMockRecorder) Range(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockUpdate)(nil).Range), name, value)
}

// Set mocks base method
func (m *MockUpdate) Set(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockUpdateMockRecorder) Set(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUpdate)(nil).Set), path, value)
}

// SetNullable mocks base method
func (m *MockUpdate) SetNullable(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNullable", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// SetNullable indicates an expected call of SetNullable
func (mr *MockUpdateMockRecorder) SetNullable(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNullable", reflect.TypeOf((*MockUpdate)(nil).SetNullable), path, value)
}

// SetSet mocks base method
func (m *MockUpdate) SetSet(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSet", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// SetSet indicates an expected call of SetSet
func (mr *MockUpdateMockRecorder) SetSet(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSet", reflect.TypeOf((*MockUpdate)(nil).SetSet), path, value)
}

// SetIfNotExists mocks base method
func (m *MockUpdate) SetIfNotExists(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfNotExists", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// SetIfNotExists indicates an expected call of SetIfNotExists
func (mr *MockUpdateMockRecorder) SetIfNotExists(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfNotExists", reflect.TypeOf((*MockUpdate)(nil).SetIfNotExists), path, value)
}

// SetExpr mocks base method
func (m *MockUpdate) SetExpr(expr string, args ...interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetExpr", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// SetExpr indicates an expected call of SetExpr
func (mr *MockUpdateMockRecorder) SetExpr(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpr", reflect.TypeOf((*MockUpdate)(nil).SetExpr), varargs...)
}

// Append mocks base method
func (m *MockUpdate) Append(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Append indicates an expected call of Append
func (mr *MockUpdateMockRecorder) Append(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockUpdate)(nil).Append), path, value)
}

// Prepend mocks base method
func (m *MockUpdate) Prepend(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepend", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Prepend indicates an expected call of Prepend
func (mr *MockUpdateMockRecorder) Prepend(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepend", reflect.TypeOf((*MockUpdate)(nil).Prepend), path, value)
}

// Add mocks base method
func (m *MockUpdate) Add(path string, value interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", path, value)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockUpdateMockRecorder) Add(path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUpdate)(nil).Add), path, value)
}

// AddStringsToSet mocks base method
func (m *MockUpdate) AddStringsToSet(path string, values ...string) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddStringsToSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// AddStringsToSet indicates an expected call of AddStringsToSet
func (mr *MockUpdateMockRecorder) AddStringsToSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStringsToSet", reflect.TypeOf((*MockUpdate)(nil).AddStringsToSet), varargs...)
}

// AddIntsToSet mocks base method
func (m *MockUpdate) AddIntsToSet(path string, values ...int) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIntsToSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// AddIntsToSet indicates an expected call of AddIntsToSet
func (mr *MockUpdateMockRecorder) AddIntsToSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntsToSet", reflect.TypeOf((*MockUpdate)(nil).AddIntsToSet), varargs...)
}

// AddFloatsToSet mocks base method
func (m *MockUpdate) AddFloatsToSet(path string, values ...float64) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFloatsToSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// AddFloatsToSet indicates an expected call of AddFloatsToSet
func (mr *MockUpdateMockRecorder) AddFloatsToSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloatsToSet", reflect.TypeOf((*MockUpdate)(nil).AddFloatsToSet), varargs...)
}

// DeleteStringsFromSet mocks base method
func (m *MockUpdate) DeleteStringsFromSet(path string, values ...string) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStringsFromSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// DeleteStringsFromSet indicates an expected call of DeleteStringsFromSet
func (mr *MockUpdateMockRecorder) DeleteStringsFromSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStringsFromSet", reflect.TypeOf((*MockUpdate)(nil).DeleteStringsFromSet), varargs...)
}

// DeleteIntsFromSet mocks base method
func (m *MockUpdate) DeleteIntsFromSet(path string, values ...int) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntsFromSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// DeleteIntsFromSet indicates an expected call of DeleteIntsFromSet
func (mr *MockUpdateMockRecorder) DeleteIntsFromSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntsFromSet", reflect.TypeOf((*MockUpdate)(nil).DeleteIntsFromSet), varargs...)
}

// DeleteFloatsFromSet mocks base method
func (m *MockUpdate) DeleteFloatsFromSet(path string, values ...float64) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFloatsFromSet", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// DeleteFloatsFromSet indicates an expected call of DeleteFloatsFromSet
func (mr *MockUpdateMockRecorder) DeleteFloatsFromSet(path interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatsFromSet", reflect.TypeOf((*MockUpdate)(nil).DeleteFloatsFromSet), varargs...)
}

// Remove mocks base method
func (m *MockUpdate) Remove(paths ...string) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockUpdateMockRecorder) Remove(paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUpdate)(nil).Remove), paths...)
}

// RemoveExpr mocks base method
func (m *MockUpdate) RemoveExpr(expr string, args ...interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveExpr", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// RemoveExpr indicates an expected call of RemoveExpr
func (mr *MockUpdateMockRecorder) RemoveExpr(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExpr", reflect.TypeOf((*MockUpdate)(nil).RemoveExpr), varargs...)
}

// If mocks base method
func (m *MockUpdate) If(expr string, args ...interface{}) dynamodb.Update {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "If", varargs...)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// If indicates an expected call of If
func (mr *MockUpdateMockRecorder) If(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "If", reflect.TypeOf((*MockUpdate)(nil).If), varargs...)
}

// ConsumedCapacity mocks base method
func (m *MockUpdate) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.Update)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockUpdateMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockUpdate)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockUpdate) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockUpdateMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUpdate)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockUpdate) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockUpdateMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockUpdate)(nil).RunWithContext), ctx)
}

// Value mocks base method
func (m *MockUpdate) Value(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockUpdateMockRecorder) Value(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockUpdate)(nil).Value), out)
}

// ValueWithContext mocks base method
func (m *MockUpdate) ValueWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValueWithContext indicates an expected call of ValueWithContext
func (mr *MockUpdateMockRecorder) ValueWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueWithContext", reflect.TypeOf((*MockUpdate)(nil).ValueWithContext), ctx, out)
}

// OldValue mocks base method
func (m *MockUpdate) OldValue(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValue", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValue indicates an expected call of OldValue
func (mr *MockUpdateMockRecorder) OldValue(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValue", reflect.TypeOf((*MockUpdate)(nil).OldValue), out)
}

// OldValueWithContext mocks base method
func (m *MockUpdate) OldValueWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValueWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValueWithContext indicates an expected call of OldValueWithContext
func (mr *MockUpdateMockRecorder) OldValueWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValueWithContext", reflect.TypeOf((*MockUpdate)(nil).OldValueWithContext), ctx, out)
}
