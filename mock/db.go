// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock is a generated GoMock package.
package mock

import (
	dynamodbiface "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	gomock "github.com/golang/mock/gomock"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockDB) Client() dynamodbiface.DynamoDBAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(dynamodbiface.DynamoDBAPI)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockDBMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDB)(nil).Client))
}

// ListTables mocks base method
func (m *MockDB) ListTables() dynamodb.ListTables {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables")
	ret0, _ := ret[0].(dynamodb.ListTables)
	return ret0
}

// ListTables indicates an expected call of ListTables
func (mr *MockDBMockRecorder) ListTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockDB)(nil).ListTables))
}

// Table mocks base method
func (m *MockDB) Table(name string) dynamodb.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", name)
	ret0, _ := ret[0].(dynamodb.Table)
	return ret0
}

// Table indicates an expected call of Table
func (mr *MockDBMockRecorder) Table(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockDB)(nil).Table), name)
}

// CreateTable mocks base method
func (m *MockDB) CreateTable(name string, from interface{}) dynamodb.CreateTable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", name, from)
	ret0, _ := ret[0].(dynamodb.CreateTable)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockDBMockRecorder) CreateTable(name, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDB)(nil).CreateTable), name, from)
}

// GetTx mocks base method
func (m *MockDB) GetTx() dynamodb.GetTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(dynamodb.GetTx)
	return ret0
}

// GetTx indicates an expected call of GetTx
func (mr *MockDBMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockDB)(nil).GetTx))
}

// WriteTx mocks base method
func (m *MockDB) WriteTx() dynamodb.WriteTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTx")
	ret0, _ := ret[0].(dynamodb.WriteTx)
	return ret0
}

// WriteTx indicates an expected call of WriteTx
func (mr *MockDBMockRecorder) WriteTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTx", reflect.TypeOf((*MockDB)(nil).WriteTx))
}
