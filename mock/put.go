// Code generated by MockGen. DO NOT EDIT.
// Source: put.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	dynamodb "github.com/kadekutama/dynamodb"
	reflect "reflect"
)

// MockPut is a mock of Put interface
type MockPut struct {
	ctrl     *gomock.Controller
	recorder *MockPutMockRecorder
}

// MockPutMockRecorder is the mock recorder for MockPut
type MockPutMockRecorder struct {
	mock *MockPut
}

// NewMockPut creates a new mock instance
func NewMockPut(ctrl *gomock.Controller) *MockPut {
	mock := &MockPut{ctrl: ctrl}
	mock.recorder = &MockPutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPut) EXPECT() *MockPutMockRecorder {
	return m.recorder
}

// If mocks base method
func (m *MockPut) If(expr string, args ...interface{}) dynamodb.Put {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "If", varargs...)
	ret0, _ := ret[0].(dynamodb.Put)
	return ret0
}

// If indicates an expected call of If
func (mr *MockPutMockRecorder) If(expr interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "If", reflect.TypeOf((*MockPut)(nil).If), varargs...)
}

// ConsumedCapacity mocks base method
func (m *MockPut) ConsumedCapacity(cc *dynamo.ConsumedCapacity) dynamodb.Put {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumedCapacity", cc)
	ret0, _ := ret[0].(dynamodb.Put)
	return ret0
}

// ConsumedCapacity indicates an expected call of ConsumedCapacity
func (mr *MockPutMockRecorder) ConsumedCapacity(cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumedCapacity", reflect.TypeOf((*MockPut)(nil).ConsumedCapacity), cc)
}

// Run mocks base method
func (m *MockPut) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockPutMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPut)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockPut) RunWithContext(ctx aws.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockPutMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockPut)(nil).RunWithContext), ctx)
}

// OldValue mocks base method
func (m *MockPut) OldValue(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValue", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValue indicates an expected call of OldValue
func (mr *MockPutMockRecorder) OldValue(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValue", reflect.TypeOf((*MockPut)(nil).OldValue), out)
}

// OldValueWithContext mocks base method
func (m *MockPut) OldValueWithContext(ctx aws.Context, out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldValueWithContext", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// OldValueWithContext indicates an expected call of OldValueWithContext
func (mr *MockPutMockRecorder) OldValueWithContext(ctx, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldValueWithContext", reflect.TypeOf((*MockPut)(nil).OldValueWithContext), ctx, out)
}
