// Code generated by MockGen. DO NOT EDIT.
// Source: ttl.describe.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "github.com/aws/aws-sdk-go/aws"
	gomock "github.com/golang/mock/gomock"
	dynamo "github.com/guregu/dynamo"
	reflect "reflect"
)

// MockDescribeTTL is a mock of DescribeTTL interface
type MockDescribeTTL struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeTTLMockRecorder
}

// MockDescribeTTLMockRecorder is the mock recorder for MockDescribeTTL
type MockDescribeTTLMockRecorder struct {
	mock *MockDescribeTTL
}

// NewMockDescribeTTL creates a new mock instance
func NewMockDescribeTTL(ctrl *gomock.Controller) *MockDescribeTTL {
	mock := &MockDescribeTTL{ctrl: ctrl}
	mock.recorder = &MockDescribeTTLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDescribeTTL) EXPECT() *MockDescribeTTLMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockDescribeTTL) Run() (dynamo.TTLDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(dynamo.TTLDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockDescribeTTLMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDescribeTTL)(nil).Run))
}

// RunWithContext mocks base method
func (m *MockDescribeTTL) RunWithContext(ctx aws.Context) (dynamo.TTLDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithContext", ctx)
	ret0, _ := ret[0].(dynamo.TTLDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithContext indicates an expected call of RunWithContext
func (mr *MockDescribeTTLMockRecorder) RunWithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithContext", reflect.TypeOf((*MockDescribeTTL)(nil).RunWithContext), ctx)
}
